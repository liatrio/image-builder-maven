#!/bin/bash
YELLOW='\033[1;33m'
NO_COLOR='\033[0m'

# Check github repos for cves
all_images=(#"image-atlantis"
            #"image-jenkins"
            # "image-builder-aws"
            # "image-builder-azure-terraform"
            # "image-builder-gitty-up"
            # "image-builder-goreleaser"
            # "image-builder-gradle"
             "image-builder-maven"
            # "image-builder-openshift"
            # "image-builder-ruby"
            # "image-builder-skaffold"
            # "image-builder-terraform"
            # "image-builder-terratest"
            # "image-runner-lead-terraform"
            )

COMPLETE=(
    "image-atlantis"
    # "image-jenkins"
    # "image-builder-aws"
    # "image-builder-azure-terraform"
    # "image-builder-gitty-up"
    # "image-builder-goreleaser"
    # "image-builder-gradle"
    # "image-builder-maven"
    # "image-builder-openshift"
    # "image-builder-ruby"
    # "image-builder-skaffold"
    # "image-builder-terraform"
    # "image-builder-terratest"
    # "image-runner-lead-terraform"
)

for image in "${all_images[@]}"; do
    if [[ ! " ${COMPLETE[*]} " =~ " ${image} " ]]; then

        printf "\n"
        echo -e "${YELLOW}Checking ${image}${NO_COLOR}"
        
        # Check if repo exists locally
        if [[ ! -d "${image}" ]]; then
            printf "\nRemote repo ${image} does not exist locally.\n"
            GITHUB_URL="https://github.com/liatrio/${image}.git"
            printf "\nCloning down the remote repo: ${GITHUB_URL}"
            git clone $GITHUB_URL
        fi

        # Builds the image
        DOCKER="maventest"
        printf "\nBuilding the image...\n"
        docker build . -t ${DOCKER}

        # Used to get all CRITICAL CVEs (Use this one as it reflects the action)
        printf "\nGetting all Critical CVEs using trivy...\n"
        CVES=($(trivy image "${DOCKER}" --format sarif --exit-code 0 --vuln-type os,library --severity CRITICAL | \
                jq -r ".runs[].tool.driver.rules[]?.helpUri" | \
                sort -u))
        
        # Used to get all CVEs
        # CVES=($(trivy image "local/${image}:latest" -f json --ignore-unfixed | \
        #         jq -r ".Results[].Vulnerabilities[]?.PrimaryURL" | \
        #         sort -u))
    
        # Prints out the urls for each CVE
        printf "\nAll CVEs for ${image} captured."
        echo "Total CVES: ${#CVES[@]}"
        for CVE in "${CVES[@]}"
        do
            echo "${CVE}"
        done

        printf "\n"
    fi
done
